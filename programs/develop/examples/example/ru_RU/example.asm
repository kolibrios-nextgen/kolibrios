; SPDX-License-Identifier: GPL-2.0-only
; SPDX-FileCopyrightText: 2006-2021 KolibriOS Team
; SPDX-FileCopyrightText: 2024 KolibriOS-NG Team

; Простой пример приложения для KolibriOS-NG.
; Компилировать с FASM:
;  Вы можете открыть example.asm в программе FASM (её ярлык есть на рабочем
;  столе). Или вы можете нажать CTRL+F9 в Tinypad или CEdit. Результат будет
;  отображён на доске отладки (приложение BOARD).

format binary as ""     ; Бинарный файл, без расширения
use32                   ; Использовать 32-битные инструкции
org 0                   ; Базовый адрес программы, всегда 0x0

;-------------------------- Заголовок приложения -----------------------------;

db      'MENUET01'      ; Сигнатура
dd      1               ; Версия заголовка
dd      START           ; Точка входа
dd      I_END           ; Конец образа приложения
dd      MEM             ; Конец памяти приложения
dd      STACKTOP        ; Адрес вершины стека
dd      0               ; Буфер для аргументов командной строки (0 если не
                        ; используется)
dd      0               ; Буфер для пути приложения (0 если не используется)

;----------------------------- Включаемые файлы ------------------------------;

include 'kosapi.inc'                    ; Предоставляет базовые константы и 
                                        ; макросы для KolibriOS-NG API

;--------------------------------- Константы ---------------------------------;

LINE_LEN = 40                           ; Длина строки

;------------------------------------ Код ------------------------------------;

START:                                  ; Начало выполнения
        call    draw_window             ; Нарисовать окно

; После того, как окно нарисовано, необходимо создать основной цикл обработки
; событий.

event_wait:
        mov     eax, SF_WAIT_EVENT      ; Функция SF_WAIT_EVENT(10):
                                        ; ожидать событие (тип события
                                        ; возращается в eax)
        mcall                           ; Без аргументов, "mcall" макрос просто
                                        ; заменяется на "int 0x40"

        cmp     eax, KOS_EV_REDRAW      ; Это событие "запрос на перерисовку" ?
        je      redraw                  ; Поясн.: возникла активность на экране
                                        ; и экран и части приложений
                                        ; приходится перерисовывать.

        cmp     eax, KOS_EV_KEY         ; Это событие "нажатие на клавишу" ?
        je      key                     ; Поясн.: пользователь нажал клавишу,
                                        ; пока приложение находится поверх
                                        ; всех окон.

        cmp     eax, KOS_EV_BUTTON      ; Это событие "нажатие на кнопку" ?
        je      button                  ; Поясн.: пользователь нажал на
                                        ; кнопку в окне приложения.

        jmp     event_wait              ; Ожидать событие снова.

redraw:                                 ; Обработчик для события перерисовки.
        call    draw_window             ; Вызвать window_draw функцию и
        jmp     event_wait              ; вернутся обратно к ожидания события.

key:                                    ; Обработчик события клавиатуры.
        mov     eax, SF_GET_KEY         ; Код клавиши возращается в регистр ah.
        mcall                           ; Код клавиши необходимо прочитать и 
                                        ; удалить из системной очереди.

        jmp     event_wait              ; Ожидать событие

button:                                 ; Обработчик события кнопок.
        mov     eax, SF_GET_BUTTON      ; Функция SF_GET_BUTTON(8):
                                        ; получить номер нажатой кнопки.
        mcall                           ; Номер кнопки возвращается в ah.

        cmp     ah, 1                   ; Номер кнопки (id) == 1 ?
                                        ; id = 1 всегда кнопка "выход".
        jne     noclose

        ; Макрос 'mcall" можно так же использовать с аргументами.
        ; То есть первый аргумент будет помещен в eax, второй в ebx и т.д.
        mcall   SF_TERMINATE_PROCESS    ; Функция SF_TERMINATE_PROCESS(-1):
                                        ; завершает эту программу.

noclose:
        jmp     event_wait              ; Снова ожидать событие,


; Определение и рисование окна.

draw_window:
        ; Начать рисование окна.
        mcall   SF_REDRAW, SSF_BEGIN_DRAW
 
        mov     eax, SF_CREATE_WINDOW   ; Функция SF_CREATE_WINDOW(0):
                                        ; определить и нарисовать оконо.
        mov     ebx, 100 * 65536 + 300  ; [x start] *65536 + [x size]
        mov     ecx, 100 * 65536 + 120  ; [y start] *65536 + [y size]
        mov     edx, 0x14ffffff         ; Цвет рабочей области RRGGBB
                                        ; 0x02000000 = тип окна 4
                                        ; (фиксированный размер,
                                        ; окно со скином).
        mov     esi, 0x808899ff         ; Цвет заголовка RRGGBB,
                                        ; 0x80000000 = обычный градиент.
        mov     edi, title              ; Установить текст заголовка окна.
        mcall
 
        mov     eax, SF_DRAW_TEXT       ; Функция SF_DRAW_TEXT(4):
                                        ; нарисовать строку текста.
        mov     ebx, 25 * 65536 + 35    ; Координаты текста.
        mov     ecx, 0x00224466         ; Стиль текста 0xXXRRGGBB.
        mov     edx, text               ; Адресс на строки текста.
        mov     esi, LINE_LEN           ; Длина строки.
 
  .newline:                             ; Нарисовать новую строку.
        mcall
        add     ebx, 10
        add     edx, LINE_LEN
        cmp     byte[edx], 0            ; Искать null-терминатор
        jne     .newline
 
        ; Завершить рисование окна.
        mcall   SF_REDRAW, SSF_END_DRAW
 
        ret
 
;-------------------------- Инициализированные данные ------------------------;

; Данные можно свободно смешивать с кодом в любых частях образа программы.
; В начале образа требуется только информация заголовка.

text    db  "Похоже, вы только что скомпилировали    "
        db  "вашу первую программу для KolibriOS-NG. "
        db  "                                        "
        db  "Поздравляем!                            ", 0

title   db  "Пример приложения", 0

;------------------------- Неинициализированные данные -----------------------;

I_END:
        rb 4096                         ; Зарезервировано 4Кб для стека
align 16
STACKTOP:

MEM:
