name: 'Build system'

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-system:
    name: 'Build system'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup dependencies
        run: |
          sudo apt update && sudo apt install perl p7zip-full nasm tup make gcc sudo mtools mkisofs parted gdisk gcc-multilib -y

      - name: Check codestyle
        run: |
          wget https://gist.githubusercontent.com/VerySweetBread/d207dd2c7efbd3cdd18dc8322b194816/raw/bf21c89d7eb1df71e253dc72bcde86ea854df19f/checker.pl
          find kernel/trunk -iname '*.asm' -or -iname '*.inc' -exec bash -c "echo {}; cat {} | perl checker.pl" \;

      - name: Install toolchain
        run: |
          wget "http://board.kolibrios.org/download/file.php?id=9919&sid=bc8412934004a60f831b1b92eae0ad34" -O install_kgcc
          chmod +x ./install_kgcc
          ./install_kgcc

          echo 'exec ${{ github.workspace }}/programs/cmm/c--/c--.elf $*' > /home/autobuild/tools/win32/bin/c--
          chmod +x ${{ github.workspace }}/programs/cmm/c--/c--.elf
          chmod +x /home/autobuild/tools/win32/bin/c--

          wget "https://websvn.kolibrios.org/filedetails.php?repname=Kolibri+OS&path=%2Fprograms%2Fdevelop%2Fktcc%2Ftrunk%2Fbin%2Fkos32-tcc" -O /home/autobuild/tools/win32/bin/kos32-tcc
          chmod +x /home/autobuild/tools/win32/bin/kos32-tcc

      - name: Compile objconv
        run: |
          source ~/.bashrc
          cd ${{ github.workspace }}/programs/develop/objconv/
          g++ -o objconv -O2 *.cpp
          chmod +x objconv
          mv objconv /home/autobuild/tools/win32/bin/.

      - name: Compile kerpack
        run: |
          export PATH=/home/autobuild/tools/win32/bin:$PATH
          source ~/.bashrc
          cd ${{ github.workspace }}/programs/other/kpack/kerpack_linux/
          make
          chmod +x kerpack
          mv kerpack /home/autobuild/tools/win32/bin/.

      - name: Compile kpack
        run: |
          export PATH=/home/autobuild/tools/win32/bin:$PATH
          source ~/.bashrc
          cd ${{ github.workspace }}/programs/other/kpack/linux/
          bash build.sh
          chmod +x kpack
          mv kpack /home/autobuild/tools/win32/bin/.

      - name: Compile clink
        run: |
          cd ${{ github.workspace }}/programs/develop/clink 
          gcc main.c -o clink
          chmod a+x clink
          mv clink /home/autobuild/tools/win32/bin/.

      - name: Configure tup
        run: |
          export PATH=/home/autobuild/tools/win32/bin:$PATH
          source ~/.bashrc
          export ROOT=${{ github.workspace }}
          cd $ROOT
          echo "CONFIG_LANG=en"                                                           >> tup.config
          echo "CONFIG_NO_JWASM=full"                                                     >> tup.config
          echo "CONFIG_NO_MSVC=full"                                                      >> tup.config
          echo "CONFIG_TOOLCHAIN_LIBPATH=/home/autobuild/tools/win32/mingw32/lib"         >> tup.config
          echo 'CONFIG_KPACK_CMD=&& kpack --nologo "%o"'                                  >> tup.config
          echo "CONFIG_KERPACK_CMD=&& kerpack %o"                                         >> tup.config
          echo "CONFIG_PESTRIP_CMD=&& EXENAME=%o fasm $ROOT/data/common/pestrip.asm %o"   >> tup.config
          echo "CONFIG_BUILD_TYPE=eng"                                                    >> tup.config

          rm ${{ github.workspace }}/programs/develop/libraries/kos_mbedtls/library/Tupfile.lua
          rm ${{ github.workspace }}/programs/develop/libraries/kos_mbedtls/programs/ssl/Tupfile.lua

          cat tup.config
          tup init
          tup

      - name: Upload floppy image
        uses: actions/upload-artifact@v4
        with:
          name: kolibrios-eng-img-${{ github.sha }}
          path: data/kolibri.img

      - name: Upload CD image
        uses: actions/upload-artifact@v4
        with:
          name: kolibrios-eng-iso-${{ github.sha }}
          path: data/kolibri.iso

      - name: Upload raw image
        uses: actions/upload-artifact@v4
        with:
          name: kolibrios-eng-raw-${{ github.sha }}
          path: data/kolibri.raw

      - name: Config tup
        run: |
          export PATH=/home/autobuild/tools/win32/bin:$PATH
          source ~/.bashrc
          export ROOT=${{ github.workspace }}
          cd $ROOT
          echo "CONFIG_LANG=ru"                                                            > tup.config
          echo "CONFIG_NO_JWASM=full"                                                     >> tup.config
          echo "CONFIG_NO_MSVC=full"                                                      >> tup.config
          echo "CONFIG_TOOLCHAIN_LIBPATH=/home/autobuild/tools/win32/mingw32/lib"         >> tup.config
          echo 'CONFIG_KPACK_CMD=&& kpack --nologo "%o"'                                  >> tup.config
          echo "CONFIG_KERPACK_CMD=&& kerpack %o"                                         >> tup.config
          echo "CONFIG_PESTRIP_CMD=&& EXENAME=%o fasm $ROOT/data/common/pestrip.asm %o"   >> tup.config
          echo "CONFIG_BUILD_TYPE=rus"                                                    >> tup.config

          tup

      - name: Upload floppy image
        uses: actions/upload-artifact@v4
        with:
          name: kolibrios-rus-img-${{ github.sha }}
          path: data/kolibri.img

      - name: Upload CD image
        uses: actions/upload-artifact@v4
        with:
          name: kolibrios-rus-iso-${{ github.sha }}
          path: data/kolibri.iso

      - name: Upload raw image
        uses: actions/upload-artifact@v4
        with:
          name: kolibrios-rus-raw-${{ github.sha }}
          path: data/kolibri.raw
